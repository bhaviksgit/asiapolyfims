@using PolyFilms.Data.Models
@using PolyFilms.Common

@{
    ViewBag.Title = "Invoice";
}

<div class="page-title">
    <div>
        <h1><i class="fa fa-file-text-o"></i> Invoices </h1>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="box">
            <div class="box-title">
                <h3><i class="fa fa-search"></i>Search</h3>
                <div class="box-tool">
                    <a data-action="collapse" href="#"><i class="fa fa-chevron-up"></i></a>
                </div>
            </div>
            <div class="box-content">
                <div class="btn-toolbar">
                    <label class="col-lg-2 control-label">From date</label>

                    <label class="col-lg-2 control-label">To date</label>

                    <label class="col-lg-2 control-label">Invoice No</label>

                    <label class="col-lg-2 control-label">Buyer</label>
                    
                    <label class="col-lg-2 control-label">Consignee</label>

                    <label class="col-lg-4 control-label"></label>

                </div>

                <div class="btn-toolbar">
                    <div class="col-lg-2 controls">
                        @(Html.Kendo().DatePicker()
                              .Name("fromDate")
                              .Events(e => e.Change("startChange"))
                              .HtmlAttributes(new { @style = "width:100% !important", @tabindex = 1 }))
                    </div>

                    <div class="col-lg-2 controls">
                        @(Html.Kendo().DatePicker()
                              .Name("toDate")
                              .Events(e => e.Change("endChange"))
                              .HtmlAttributes(new { @style = "width:100% !important", @tabindex = 2 }))
                    </div>

                    <div class="col-lg-2 controls">
                        @(Html.Kendo().TextBox().Name("invoiceNo"))
                    </div>

                    <div class="col-lg-2 controls">
                        @(Html.Kendo().ComboBox()
                              .Name("customerId")
                              .HtmlAttributes(new { style = "width:100%;" })
                              .BindTo(ViewBag.CustomerList)
                              .DataTextField("Name")
                              .DataValueField("CustomerId")
                              .Placeholder("--Select Buyer--")
                              )
                    </div>
                    
                    <div class="col-lg-2 controls">
                        @(Html.Kendo().ComboBox()
                              .Name("consigneeId")
                              .HtmlAttributes(new { style = "width:100%;" })
                              .BindTo(ViewBag.ConsigneeList)
                              .DataTextField("Name")
                              .DataValueField("ConsigneeId")
                              .Placeholder("--Select Consignee--")
                              )
                    </div>

                    <div class="col-lg-2 controls">
                        <input type="button" value="Search" class="btn btn-primary" onclick="search()" />
                        <input type="button" value="Reset" id="Reset" class="btn btn-primary" onclick="reset()" style="margin-left: 5px !important" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">

        @(Html.Kendo().Grid<InvoiceModel>()
                    .Name("invoiceGrid")
                    .Columns(columns =>
                    {
                        if (AuthorizationHelper.CanEditDelete(ViewContext.RouteData.Values["Controller"].ToString()))
                        {
                            columns.Command(command =>
                            {
                                if (AuthorizationHelper.CanEdit(ViewContext.RouteData.Values["Controller"].ToString()))
                                {
                                    command.Custom("Edit").Text("<span class='k-icon k-i-edit' title='Edit'></span>").HtmlAttributes(new { @style = "margin:2px" }).Click("onEdit");
                                }
                                if (AuthorizationHelper.CanDelete(ViewContext.RouteData.Values["Controller"].ToString()))
                                {
                                    command.Custom("Delete").Text("<span class='k-icon k-i-close' title='Delete'></span>").HtmlAttributes(new { @style = "margin:2px" }).Click("onDelete");
                                }
                                command.Custom("Report").Text("<span class='k-icon k-i-print' title='Report'></span>").HtmlAttributes(new { @style = "margin:2px" }).Click("onReport");
                            }).Title("Action").HtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanStatus)
                               .HeaderHtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanStatus);
                        }
                        columns.Bound(d => d.InvoiceNo);
                        columns.Bound(d => d.InvoiceDate).Format("{0:" + CommonHelper.DateFormate + "}");
                        columns.Bound(d => d.TotalAmount);
                        columns.Bound(d => d.TaxAmount);
                        columns.Bound(d => d.TotalAmountWithTax);
                        columns.Bound(d => d.AmountInWords);
                    })
                    .ToolBar(toolbar =>
                    {
                        if (AuthorizationHelper.CanAdd(ViewContext.RouteData.Values["Controller"].ToString()))
                        {
                            toolbar.ClientTemplate("<a class='k-button k-button-icontext' onclick='addInvoice()' href='javascript:void(0)'><span class='k-icon k-i-plus' title='Add'></span>Add</a>" +
                                                   "<a role='button' class='k-button k-button-icontext k-grid-excel' href='javascript:void(0)'><span class='k-icon k-i-file-excel'></span>Export to Excel</a>");
                        }
                    })
                    .Pageable(x =>
                    {
                        x.Refresh(true);
                        x.PageSizes(WebHelper.PageSizes);
                    })
                    .Excel(excel => excel
                        .FileName("Invoice List")
                        .Filterable(true)
                        .ProxyURL(Url.Action("Excel_Export_Save", "Home"))
                    )
                                      .Sortable(sortable => sortable.AllowUnsort(false))
                                      .Filterable(filter => filter.Enabled(false))
                                      .NoRecords()
                                       .ClientDetailTemplateId("templateDispatch")
                                      .Events(e => e.DataBound("onDataBound"))
                                      .DataSource(dataSource => dataSource
                                      .Ajax()
                                      .ServerOperation(true)
                                      .PageSize(WebHelper.PageSize)
                                      .Model(model => model.Id(d => d.InvoiceId))
                                      .Events(events => events.Error("onError(\"orderGrid\")"))
                                      .Read(read => read.Action("KendoRead", "Invoice").Data("additionalInfo"))
                ))
    </div>
</div>

<script id="templateDispatch" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<DispatchModel>()
                      .Name("grid_#=InvoiceId#")
              .Columns(columns =>
              {
                  columns.Command(command =>
                  {

                      command.Custom("ReportDispatch").Text("<span class='k-icon k-i-print' title='Report'></span>").HtmlAttributes(new { @style = "margin:2px" }).Click("onReportDispatch");

                  }).Title("Action").HtmlAttributes(WebHelper.StatusColumnStyle)
                      .HeaderHtmlAttributes(WebHelper.StatusColumnStyle);
                  columns.Bound(d => d.DispatchNo);
                  columns.Bound(d => d.DispatchDate).Format("{0:" + CommonHelper.DateFormate + "}");

              })
             
              .NoRecords()
              .DataSource(dataSource => dataSource
                  .Ajax()
                  .ServerOperation(true)
                          
                          .Model(model => model.Id(d => d.DispatchId))
                          .Events(events => events.Error("onError(\"grid_#=InvoiceId#\")"))
                          .Read(read => read.Action("KendoReadDispatchByInvoice", "Invoice", new { invoiceId = "#=InvoiceId#" }))
                      ).ToClientTemplate())
</script>



@(Html.Kendo().Window()
      .Name("wInvoiceReport")
      .Title("Invoice Slip ")
      .Visible(false)
      .Draggable(true)
      .Modal(true)
      .Width(900)
      .Height(720))

@(Html.Kendo().Window()
      .Name("wDispatchReport")
      .Title("Delivery Report")
      .Visible(false)
      .Draggable(true)
      .Modal(true)
      .Width(900)
      .Height(720))

<script type="text/javascript">

    function addInvoice() {
        window.location.href = '@Url.Action("Create", "Invoice")';
    }

    function onEdit(e) {
        e.preventDefault();
        var tr = $(e.target).closest("tr");
        var data = this.dataItem(tr);
        var urllink = '@Url.Action("Edit", "Invoice")';
        if (data != null)
            window.location.href = urllink + "?id=" + data.InvoiceId;
    }


    function onDelete(e) {
        bootbox.confirm('Are you sure you want to delete this invoice?', function (result) {
            if (result === true) {
                e.preventDefault();
                var grid = $("#invoiceGrid").data("kendoGrid");
                var tr = $(e.target).closest("tr");
                var data = grid.dataItem(tr);
                var url = '@Url.Action("KendoDestroy", "Invoice")';
                if (data != null)
                    callwebservice(url, 'invoiceId=' + data.InvoiceId, DeleteComplete, false, datatypeEnum.text, typeEnum.post);
            }
        }, 'popup-confirmation');
    }

    function DeleteComplete(returString) {
        if (returString != null) {
            if (returString !== "") {
                showMessageOnly(returString, 'popup-error');
            } else {
                readKendoGrid('invoiceGrid');
            }
        }
    }

    function search() {
        readKendoGrid('invoiceGrid');
    }


    function onDataBound(e) {
        var grid = $("#invoiceGrid").data("kendoGrid");
        var gridData = grid.dataSource.view();
        for (var i = 0; i < gridData.length; i++) {
            var currentUid = gridData[i].uid;
            if (gridData[i].IsFinalize === true) {
                var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
                var deleteButton = $(currenRow).find(".k-grid-Delete");
                deleteButton.hide();
            }
        }
    }

    function additionalInfo() {
        return {
            fromDate: getInputValueById('fromDate'),
            toDate: getInputValueById('toDate'),
            customerId: getInputValueById('customerId'),
            consigneeId: getInputValueById('consigneeId'),
            invoiceNo: getInputValueById('invoiceNo')
        }
    }

    function reset() {
        setKendoDatePickerValue('fromDate', '');
        setKendoDatePickerValue('toDate', '');
        setKendComboboxValue('customerId', '');
        setKendComboboxValue('consigneeId', '');
        setInputValueById('invoiceNo', '');
        

        var endPicker = $("#toDate").data("kendoDatePicker");
        endPicker.min(new Date(1900, 0, 1)); // Setting defaults
        endPicker.max(new Date(2099, 11, 31));

        var startPicker = $("#fromDate").data("kendoDatePicker");
        startPicker.min(new Date(1900, 0, 1)); // Setting defaults
        startPicker.max(new Date(2099, 11, 31));

        readKendoGrid('invoiceGrid');
    }

    function onReport(e) {
        e.preventDefault();
        var tr = $(e.target).closest("tr");
        var data = this.dataItem(tr);
        if (data != null) {
            var urllink = '@Url.Action("GetInvoiceReport", "Invoice")';
            var window = $("#wInvoiceReport").data("kendoWindow");
            window.refresh({
                url: urllink,
                data: { "invoiceId": data.InvoiceId }
            });
            window.center();
            window.open();

        }
    }

    function onReportDispatch(e) {
        e.preventDefault();
        var tr = $(e.target).closest("tr");
        var data = this.dataItem(tr);
        if (data != null) {
            var urllink = '@Url.Action("GetDispatchReportList", "Dispatch")';
            var window = $("#wDispatchReport").data("kendoWindow");
            window.refresh({
                url: urllink,
                data: {
                    "dispatchId": data.DispatchId,
                    "dispatchNo": data.DispatchNo,
                    "dispatchDate": convertDateToString(data.DispatchDate)
                }
            });
            window.center();
            window.open();
        }
    }

    function startChange() {
        var endPicker = $("#toDate").data("kendoDatePicker"),
            startDate = this.value();

        if (startDate) {
            startDate = new Date(startDate);
            startDate.setDate(startDate.getDate());
            endPicker.min(startDate);
        } else if (!endPicker.value()) {   // You said both
            endPicker.min(new Date(1900, 0, 1)); // Setting defaults
            endPicker.max(new Date(2099, 11, 31));
            this.min(new Date(1900, 0, 1));
            this.max(new Date(2099, 11, 31));
        }
    }

    function endChange() {
        var startPicker = $("#fromDate").data("kendoDatePicker"),
            endDate = this.value();

        if (endDate) {
            endDate = new Date(endDate);
            endDate.setDate(endDate.getDate());
            startPicker.max(endDate);
        }
        else if (!startPicker.value()) {
            startPicker.min(new Date(1900, 0, 1)); // Setting defaults
            startPicker.max(new Date(2099, 11, 31));
            this.min(new Date(1900, 0, 1));
            this.max(new Date(2099, 11, 31));
        }
    }
</script>