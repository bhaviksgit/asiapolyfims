@using Kendo.Mvc.UI;
@model PolyFilms.Data.Models.SlittingModel

@{
    ViewBag.Title = "Slitting";
}
<div class="page-title">
    <div>
        <h1><i class="fa fa-database"></i> Manage Slitting </h1>
        @if (Model.IsSlittingUsed)
        {
            <h4>This Slitting is already in use, So you can not change it.</h4>
        }
    </div>
</div>
<div class="row">
    <div class="col-md-12">

        @using (Html.BeginForm("SaveSlitting", "Slitting", FormMethod.Post, new { @class = "form-horizontal", @id = "validation-form" }))
        {
            <div class="box">
                <div class="box-content">
                    <div class="row">
                        <div class="col-lg-6">
                            @if (Model.SlittingId > 0)
                            {
                                <div class="form-group">
                                    <div class="col-sm-12 col-lg-12" style="font-weight:bold !important;font-size:18px;">
                                        @Html.DisplayFor(m => m.SlittingRollNo)
                                    </div>
                                </div>
                            }
                        </div>
                        
                    @if (!Model.IsSlittingUsed)
                    {
                        <div class="col-lg-6 text-right">
                            <input type="submit" class="btn btn-primary" value="Save" name="create" id="save">
                            @*<input type="submit" class="btn btn-primary" value="Save & Continue" name="create" id="savecontinue">
                            <input type="submit" value="Save & New" name="create" id="savenew" class="btn btn-primary">*@
                            <a href="@Url.Action("Index", "Slitting")" class="btn btn-primary">Back</a>
                        </div>
                    }
                    else
                    {
                        <div class="col-lg-6 text-right">
                            
                            <a href="@Url.Action("Index", "Slitting")" class="btn btn-primary">Back</a>
                        </div>
                    }
                    </div>

                </div>
            </div>
            <div class="box">
                <div class="box-title">
                    <h3>
                        <i class="fa fa-bars"></i>Basic Details
                    </h3>
                </div>

                <div class="box-content">
                    @Html.HiddenFor(m => m.SlittingId)
                    @Html.HiddenFor(m => m.SlittingRollNo)
                    @Html.HiddenFor(m => m.Day)
                    @Html.HiddenFor(m => m.Month)
                    @Html.HiddenFor(m => m.Year)
                    @Html.HiddenFor(m => m.SequenceNo)
                    @*@Html.HiddenFor(m => m.ProductId)*@

                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group">
                                @Html.LabelFor(x => x.SlittingDate, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @if (Model.SlittingId > 0)
                                    {
                                        @Html.Kendo().DatePickerFor(m => m.SlittingDate).HtmlAttributes(new { @tabindex = 1, @readonly = "readonly" })
                                    }
                                    else
                                    {
                                        @Html.Kendo().DatePickerFor(m => m.SlittingDate).HtmlAttributes(new { @tabindex = 1 })
                                        @Html.ValidationMessageFor(x => x.SlittingDate)
                                    }
                                </div>
                            </div>

                            @if (Model.IsPrimarySlitting)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JumboId, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.JumboId)
                                              .Value(Model.JumboId == 0 ? string.Empty : Model.JumboId.ToString())
                                              .Placeholder("--Select Jumbo--")
                                              .DataTextField("JumboNo")
                                              .DataValueField("JumboId")
                                              .HtmlAttributes(new { @tabindex = 3 })
                                              .DataSource(source =>
                                              {
                                                  source.Read(read =>
                                                  {
                                                      read.Action("GetJumboList", "Common");
                                                  });
                                              })
                                              .Events(e => e.Change("OnchangeJumbo"))
                                              )
                                        <input type="button" class="btn btn-primary" value="View" name="jumbo" onclick="viewJumboDetail()">

                                        @Html.ValidationMessageFor(m => m.JumboId)
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PrimarySlittingId, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.PrimarySlittingId)
                                              .Value(Model.PrimarySlittingId == 0 ? string.Empty : Model.PrimarySlittingId.ToString())
                                              .Placeholder("--Select Slitting --")
                                              .DataTextField("SlittingRollNo")
                                              .DataValueField("SlittingId")
                                              .HtmlAttributes(new { @tabindex = 3 })
                                              .DataSource(source =>
                                              {
                                                  source.Read(read =>
                                                  {
                                                      read.Action("GetPrimarySlittingList", "Common");
                                                  });

                                              })
                                              .Events(e => e.Change("OnchangetoClearIndexCommon")))
                                        @Html.ValidationMessageFor(m => m.PrimarySlittingId)
                                    </div>
                                </div>
                            }

                            

                            <div class="form-group">
                                @Html.LabelFor(m => m.Thickness, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @Html.Kendo().NumericTextBoxFor(m => m.Thickness).Min(0).Spinners(false)
                                    @Html.ValidationMessageFor(m => m.Thickness)
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ShiftId, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @(Html.Kendo().ComboBoxFor(m => m.ShiftId)
                                          .Value(Model.ShiftId == 0 ? string.Empty : Model.ShiftId.ToString())
                                          .Placeholder("--Select Shift --")
                                          .DataTextField("Name")
                                          .DataValueField("ShiftId")
                                          .HtmlAttributes(new { @tabindex = 2 })
                                          .DataSource(source =>
                                          {
                                              source.Read(read =>
                                              {
                                                  read.Action("GetShiftList", "Common");
                                              });
                                          })
                                          .Events(e => e.Change("OnchangetoClearIndexCommon")))

                                    @Html.ValidationMessageFor(m => m.ShiftId)
                                </div>
                            </div>
                            
                            <div class="form-group">
                                @Html.LabelFor(m => m.ProductId, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @(Html.Kendo().ComboBoxFor(m => m.ProductId)
                                          .Value(Model.ProductId == 0 ? string.Empty : Model.ProductId.ToString())
                                          .Placeholder("--Select Jumbo--")
                                          .DataTextField("Name")
                                          .DataValueField("ProductId")
                                          .HtmlAttributes(new {  @readonly = "readonly" })
                                          .DataSource(source =>
                                          {
                                              source.Read(read =>
                                              {
                                                  read.Action("GetProductList", "Common");
                                              });
                                          })
                                          )

                                    @Html.ValidationMessageFor(m => m.ProductId)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.OperatorId, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @(Html.Kendo().ComboBoxFor(m => m.OperatorId)
                                          .Value(Model.OperatorId == 0 ? string.Empty : Model.OperatorId.ToString())
                                          .Placeholder("--Select Operator --")
                                          .DataTextField("Username")
                                          .DataValueField("UserId")
                                          .HtmlAttributes(new { @tabindex = 4 })
                                          .DataSource(source =>
                                          {
                                              source.Read(read =>
                                              {
                                                  read.Action("GetUserList", "Common");
                                              });
                                          })
                                          .Events(e => e.Change("OnchangetoClearIndexCommon")))

                                    @Html.ValidationMessageFor(m => m.OperatorId)
                                </div>
                            </div>

                        </div>
                    </div>

                </div>

            </div>

            <div class="box">
            <div class="box-title">
                <h3>
                    <i class="fa fa-bars"></i>Slitting Details
                </h3>
            </div>
            

            <div class="box-content">
                    
                    <div class="row">
                        <div class="col-lg-6">
                            
                            <div class="form-group">
                                @Html.LabelFor(m => m.Location, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @if (Model.SlittingId > 0)
                                    {
                                        @Html.Kendo().TextBoxFor(m => m.Location).HtmlAttributes(new { @class = "k-textbox", @tabindex = 5, @readonly = "readonly", @style = "text-transform:uppercase" })

                                    }
                                    else
                                    {
                                        @Html.Kendo().TextBoxFor(m => m.Location).HtmlAttributes(new { @class = "k-textbox", @tabindex = 5 })
                                        @Html.ValidationMessageFor(m => m.Location)
                                    }
                                </div>
                            </div>
                            
                            <div class="form-group">
                                @Html.LabelFor(m => m.Length, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @Html.Kendo().NumericTextBoxFor(m => m.Length).Min(0).Spinners(false).HtmlAttributes(new { @tabindex = 7 })
                                    @Html.ValidationMessageFor(m => m.Length)
                                </div>
                            </div>
                            
                            <div class="form-group">
                                @Html.LabelFor(m => m.CoreId, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @(Html.Kendo().ComboBoxFor(m => m.CoreId)
                                          .Value(Model.CoreId == 0 ? string.Empty : Model.CoreId.ToString())
                                          .Placeholder("--Select Core --")
                                          .DataTextField("Name")
                                          .DataValueField("CoreId")
                                          .HtmlAttributes(new { @tabindex = 9 })
                                          .DataSource(source =>
                                          {
                                              source.Read(read =>
                                              {
                                                  read.Action("GetCoreList", "Common");
                                              });
                                          })
                                          .Events(e => e.Change("onChangeCore"))
                                    )

                                    @Html.ValidationMessageFor(m => m.CoreId)
                                </div>
                            </div>
                            
                            <div class="form-group">
                                @Html.LabelFor(m => m.Grossweight, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @Html.Kendo().NumericTextBoxFor(m => m.Grossweight).Min(0).Spinners(false).Events(e => e.Change("netWeigthCalculate")).HtmlAttributes(new { @tabindex = 10,@readonly="readonly" })
                                    @Html.ValidationMessageFor(m => m.Grossweight)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.TreatmentId, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @(Html.Kendo().ComboBoxFor(m => m.TreatmentId)
                                          .Value(Model.TreatmentId == 0 ? string.Empty : Model.TreatmentId.ToString())
                                          .Placeholder("--Select Treatment --")
                                          .DataTextField("Name")
                                          .DataValueField("TreatmentId")
                                          .HtmlAttributes(new { @tabindex = 11 })
                                          .DataSource(source =>
                                          {
                                              source.Read(read =>
                                              {
                                                  read.Action("GetTreatmentList", "Common");
                                              });
                                          })
                                          .Events(e => e.Change("OnchangetoClearIndexCommon")))

                                    @Html.ValidationMessageFor(m => m.TreatmentId)
                                </div>
                            </div>

                            @if (Model.IsPrimarySlitting)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(m => m.OrderId, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.OrderId)
                                  .Value(Model.OrderId == 0 ? string.Empty : Model.OrderId.ToString())
                                  .Placeholder("--Select Order --")
                                  .DataTextField("OrderNo")
                                  .DataValueField("OrderId")
                                  .HtmlAttributes(new { @tabindex = 13 })
                                  .DataSource(source =>
                                  {
                                      source.Read(read =>
                                      {
                                          read.Action("GetFilterOrderList", "Common").Data("filterJumboProduct");
                                      })
                                          .ServerFiltering(true);
                                  })
                                  .Enable(false)
                                  .AutoBind(false)
                                  .CascadeFrom("JumboId")
                                  .Events(e => e.Change("OnchangetoClearIndexCommon")))

                                        <input type="button" class="btn btn-primary" value="View" name="add" onclick="viewOrderDetail()">

                                        @Html.ValidationMessageFor(m => m.OrderId)
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="form-group">
                                    @Html.LabelFor(m => m.OrderId, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.OrderId)
                                  .Value(Model.OrderId == 0 ? string.Empty : Model.OrderId.ToString())
                                  .Placeholder("--Select Order --")
                                  .DataTextField("OrderNo")
                                  .DataValueField("OrderId")
                                  .HtmlAttributes(new { @tabindex = 13 })
                                  .DataSource(source =>
                                  {
                                      source.Read(read =>
                                      {
                                          read.Action("GetFilterOrderList", "Common").Data("filterSlittingProduct");
                                      })
                                          .ServerFiltering(true);
                                  })
                                  .Enable(false)
                                  .AutoBind(false)
                                  .CascadeFrom("PrimarySlittingId")
                                  .Events(e => e.Change("OnchangetoClearIndexCommon")))

                                        <input type="button" class="btn btn-primary" value="View" name="add" onclick="viewOrderDetail()">

                                        @Html.ValidationMessageFor(m => m.OrderId)
                                    </div>
                                </div>
                            }
                            
                            
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Joint, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @Html.Kendo().NumericTextBoxFor(m => m.Joint).Min(0).Spinners(false).HtmlAttributes(new { @tabindex = 15 })
                                        @Html.ValidationMessageFor(m => m.Joint)
                                    </div>
                                </div>
                           

                        </div>
                        <div class="col-lg-6">
                            
                            <div class="form-group">
                                @Html.LabelFor(m => m.Width, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @Html.Kendo().NumericTextBoxFor(m => m.Width).Min(0).Spinners(false).HtmlAttributes(new { @tabindex = 6 }).Events(e=>e.Change("onChnageWidth"))
                                    @Html.ValidationMessageFor(m => m.Width)
                                </div>
                            </div>
                            
                            <div class="form-group">
                                @Html.LabelFor(m => m.Od, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @Html.Kendo().NumericTextBoxFor(m => m.Od).Min(0).Spinners(false).HtmlAttributes(new { @tabindex = 8 })
                                    @Html.ValidationMessageFor(m => m.Od)
                                </div>
                            </div>
                            
                            <div class="form-group">
                                @Html.LabelFor(m => m.CoreWeight, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @Html.Kendo().NumericTextBoxFor(m => m.CoreWeight).HtmlAttributes(new { @id = "CoreWeight", @readonly = "readonly" }).Spinners(false).Decimals(7).Format("n7")
                                    @Html.ValidationMessageFor(m => m.CoreWeight)
                                </div>
                            </div>
                            
                            <div class="form-group">
                                @Html.LabelFor(m => m.Netweight, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @Html.Kendo().NumericTextBoxFor(m => m.Netweight).Spinners(false).HtmlAttributes(new { @readonly = "readonly" }).Decimals(7).Format("n7")
                                    @Html.ValidationMessageFor(m => m.Netweight)
                                </div>
                            </div>
                            
                            <div class="form-group">
                                @Html.LabelFor(m => m.Quality, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @(Html.Kendo().ComboBoxFor(m => m.Quality)
                                          .Value(Model.Quality == 0 ? string.Empty : Model.Quality.ToString())
                                          .Placeholder("--Select Quality --")
                                          .DataTextField("Name")
                                          .DataValueField("SlittingStatusId")
                                          .HtmlAttributes(new { @tabindex = 12 })
                                          .DataSource(source =>
                                          {
                                              source.Read(read =>
                                              {
                                                  read.Action("GetQualityList", "Common");
                                              });
                                          })
                                          .Events(e => e.Change("OnchangetoClearIndexCommon")))

                                    @Html.ValidationMessageFor(m => m.Quality)
                                </div>
                            </div>
                            
                            <div class="form-group">
                                @Html.LabelFor(m => m.Remarks, new { @class = "col-sm-6 col-lg-3 control-label" })
                                <div class="col-sm-6 col-lg-9 controls">
                                    @Html.TextAreaFor(model => model.Remarks, new { @class = "k-textbox", style = "width: 100%;", @tabindex = 14 })
                                    @Html.ValidationMessageFor(m => m.Remarks)
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

            if (Model.IsPrimarySlitting)
            {
                <div class="box">
                    <div class="box-title">
                        <h3>
                            <i class="fa fa-bars"></i>Joints
                        </h3>
                    </div>
                    <div class="box-content">
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JumboJointId1, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.JumboJointId1)
                                              .Value(Model.JumboJointId1 == 0 ? string.Empty : Model.JumboJointId1.ToString())
                                              .Placeholder("--Select Jumbo Joint 1--")
                                              .DataTextField("JumboNo")
                                              .DataValueField("JumboId")
                                              .HtmlAttributes(new { @tabindex = 6 })
                                              .DataSource(source =>
                                              {
                                                  source.Read(read =>
                                                  {
                                                      read.Action("GetJumboListForJoint", "Common").Data("getjointProductId");
                                                  });
                                              })
                                             // .AutoBind(false)
                                        )

                                        @Html.ValidationMessageFor(m => m.JumboJointId1)
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(m => m.JumboJointId2, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.JumboJointId2)
                                              .Value(Model.JumboJointId2 == 0 ? string.Empty : Model.JumboJointId2.ToString())
                                              .Placeholder("--Select Jumbo Joint 2--")
                                              .DataTextField("JumboNo")
                                              .DataValueField("JumboId")
                                              .HtmlAttributes(new { @tabindex = 8 })
                                              .DataSource(source =>
                                              {
                                                  source.Read(read =>
                                                  {
                                                      read.Action("GetJumboListForJoint", "Common").Data("getjointProductId");
                                                  });
                                              })
                                              //.AutoBind(false)
                                        )

                                        @Html.ValidationMessageFor(m => m.JumboJointId2)
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(m => m.JumboJointId3, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.JumboJointId3)
                                              .Value(Model.JumboJointId3 == 0 ? string.Empty : Model.JumboJointId3.ToString())
                                              .Placeholder("--Select Jumbo Joint 3--")
                                              .DataTextField("JumboNo")
                                              .DataValueField("JumboId")
                                              .HtmlAttributes(new { @tabindex = 10 })
                                              .DataSource(source =>
                                              {
                                                  source.Read(read =>
                                                  {
                                                      read.Action("GetJumboListForJoint", "Common").Data("getjointProductId");
                                                  });
                                              })
                                             // .AutoBind(false)
                                        )

                                        @Html.ValidationMessageFor(m => m.JumboJointId3)
                                    </div>
                                </div>
                            </div>
                            </div>
                    </div>
                </div>
            }
            @*else
            {
                <div class="box">
                    <div class="box-title">
                        <h3>
                            <i class="fa fa-bars"></i>Joints
                        </h3>
                    </div>
                    <div class="box-content">
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.SlittingJointId1, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.SlittingJointId1)
                                              .Value(Model.SlittingJointId1 == 0 ? string.Empty : Model.SlittingJointId1.ToString())
                                              .Placeholder("--Select Slitting Joint 1--")
                                              .DataTextField("SlittingRollNo")
                                              .DataValueField("SlittingId")
                                              .HtmlAttributes(new { @tabindex = 6 })
                                              .DataSource(source =>
                                              {
                                                  source.Read(read =>
                                                  {
                                                      read.Action("GetSlittingListForJoint", "Common").Data("getslittingjointProductId");
                                                  });
                                              })
                                        // .AutoBind(false)
                                        )

                                        @Html.ValidationMessageFor(m => m.SlittingJointId1)
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(m => m.SlittingJointId2, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.SlittingJointId2)
                                              .Value(Model.SlittingJointId2 == 0 ? string.Empty : Model.SlittingJointId2.ToString())
                                              .Placeholder("--Select Slitting Joint 2--")
                                              .DataTextField("SlittingRollNo")
                                              .DataValueField("SlittingId")
                                              .HtmlAttributes(new { @tabindex = 8 })
                                              .DataSource(source =>
                                              {
                                                  source.Read(read =>
                                                  {
                                                      read.Action("GetSlittingListForJoint", "Common").Data("getslittingjointProductId");
                                                  });
                                              })
                                              // .AutoBind(false)
                                              )

                                        @Html.ValidationMessageFor(m => m.SlittingJointId2)
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(m => m.SlittingJointId3, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.SlittingJointId3)
                                              .Value(Model.SlittingJointId3 == 0 ? string.Empty : Model.SlittingJointId3.ToString())
                                              .Placeholder("--Select Slitting Joint 3--")
                                              .DataTextField("SlittingRollNo")
                                              .DataValueField("SlittingId")
                                              .HtmlAttributes(new { @tabindex = 10 })
                                              .DataSource(source =>
                                              {
                                                  source.Read(read =>
                                                  {
                                                      read.Action("GetSlittingListForJoint", "Common").Data("getslittingjointProductId");
                                                  });
                                              })
                                              // .AutoBind(false)
                                        )

                                        @Html.ValidationMessageFor(m => m.SlittingJointId3)
                                    </div>
                                </div>
                            </div>
                            
                        </div>
                    </div>
                </div>
            }*@

        }
       </div>
 </div>

@(Html.Kendo().Window()
      .Name("wOrderDetail")
      .Title("Order Details")
      .Visible(false)
      .Draggable(true)
      .Modal(true)
      .Width(730)
      .Height(400))


@(Html.Kendo().Window()
      .Name("wJumboDetail")
      .Title("Jumbo Details")
      .Visible(false)
      .Draggable(true)
      .Modal(true)
      .Width(730)
      .Height(400))
<script>

    $(function () {
        setFocusById('SlittingDate');
        intializeValidator();
    });


    
    function intializeValidator() {
        $("#validation-form").kendoValidator({
            rules: {
                //hasItems: function (input) {
                //    if (input.is("[name=JumboJointId]")) {
                //        //Get the MultiSelect instance
                //        var ms = input.data("kendoMultiSelect");
                //        var jointNo = $("#Joint").val();
                //        if (jointNo > 0) {
                //            if (ms.value().length === 0) {
                //                return false;
                //            }
                //            else if (ms.value().length > jointNo) {
                //                return false;
                //            }
                //        }
                //    }
                //    return true;
                //},

                jumboRule: function (input) {
                    if (input.is("[name=JumboId]")) {
                        if ('@Model.IsPrimarySlitting'){
                            var comboBox = input.data("kendoComboBox");
                            if (comboBox.selectedIndex === -1) {
                                return false;
                            }
                        }
                    }
                    return true;
                },

                primaryslittingRule: function (input) {
                    if (input.is("[name=PrimarySlittingId]")) {
                        if ('@Model.IsPrimarySlitting' === 'False') {
                            var comboBox = input.data("kendoComboBox");
                            if (comboBox.selectedIndex === -1) {
                                return false;
                            }
                        }
                    }
                    return true;
                },

                jumboJoint1Rule: function (input) {
                    if (input.is("[name=JointWeight1]")) {
                        var comboBoxValue = getKendComboboxValue('JumboJointId1');
                        if (comboBoxValue > 0 && input.data('kendoNumericTextBox').value() == null) {
                            return false;
                        }
                    }
                    return true;
                },
                jumboJoint2Rule: function (input) {
                    if (input.is("[name=JointWeight2]")) {
                        var comboBoxValue = getKendComboboxValue('JumboJointId2');
                        if (comboBoxValue > 0 && input.data('kendoNumericTextBox').value() == null) {
                            return false;
                        }
                    }
                    return true;
                },

                jumboJoint3Rule: function (input) {
                    if (input.is("[name=JointWeight3]")) {
                        var comboBoxValue = getKendComboboxValue('JumboJointId3');
                        if (comboBoxValue > 0 && input.data('kendoNumericTextBox').value() == null) {
                            return false;
                        }
                    }
                    return true;
                },
                jumboJointId1Rule: function (input) {
                    if (input.is("[name=JumboJointId1]")) {
                        var comboBox = input.data('kendoComboBox');
                        var weight1 = getkendoNumericTextBoxValue('JointWeight1');
                        if (comboBox.selectedIndex === -1 && weight1 !== null) {
                            return false;
                        }
                    }
                    return true;
                },
                jumboJointId2Rule: function (input) {
                    if (input.is("[name=JumboJointId2]")) {
                        var comboBox = input.data('kendoComboBox');
                        var weight1 = getkendoNumericTextBoxValue('JointWeight2');
                        if (comboBox.selectedIndex === -1 && weight1 !== null) {
                            return false;
                        }
                    }
                    return true;
                },
                jumboJointId3Rule: function (input) {
                    if (input.is("[name=JumboJointId3]")) {
                        var comboBox = input.data('kendoComboBox');
                        var weight1 = getkendoNumericTextBoxValue('JointWeight3');
                        if (comboBox.selectedIndex === -1 && weight1 !== null) {
                            return false;
                        }
                    }
                    return true;
                },
                jointDuplicationRule1: function (input) {
                    if (input.is("[name=JumboJointId1]")) {
                        var comboBox1 = getKendComboboxValue('JumboJointId1');
                        var comboBox2 = getKendComboboxValue('JumboJointId2');
                        var comboBox3 = getKendComboboxValue('JumboJointId3');
                        if (comboBox1 !== "" && comboBox2 !== "" && comboBox1 === comboBox2) {
                            return false;
                        }
                        if (comboBox1 !== "" && comboBox3 !== "" && comboBox1 === comboBox3) {
                            return false;
                        }

                    }
                    return true;
                },
                jointDuplicationRule2: function (input) {
                    if (input.is("[name=JumboJointId2]")) {
                        var comboBox1 = getKendComboboxValue('JumboJointId1');
                        var comboBox2 = getKendComboboxValue('JumboJointId2');
                        var comboBox3 = getKendComboboxValue('JumboJointId3');
                        if (comboBox1 !== "" && comboBox2 !== "" && comboBox1 === comboBox2) {
                            return false;
                        }
                        if (comboBox2 !== "" && comboBox3 !== "" && comboBox2 === comboBox3) {
                            return false;
                        }

                    }
                    return true;
                },
                jointDuplicationRule3: function (input) {
                    if (input.is("[name=JumboJointId3]")) {
                        var comboBox1 = getKendComboboxValue('JumboJointId1');
                        var comboBox2 = getKendComboboxValue('JumboJointId2');
                        var comboBox3 = getKendComboboxValue('JumboJointId3');
                        if (comboBox1 !== "" && comboBox3 !== "" && comboBox1 === comboBox3) {
                            return false;
                        }
                        if (comboBox2 !== "" && comboBox3 !== "" && comboBox2 === comboBox3) {
                            return false;
                        }

                    }
                    return true;
                }
            },
            messages: {
                //hasItems: "Please select jumbo joint as per joint number",
                jumboRule: "Jumbo is required",
                primaryslittingRule: "Primary slitting is required",
                jumboJoint1Rule: "Weight for Jumbo Joint is required. ",
                jumboJoint2Rule: "Weight for Jumbo Joint is required. ",
                jumboJoint3Rule: "Weight for Jumbo Joint is required. ",
                jumboJointId1Rule: "Please select Jumbo Joint.",
                jumboJointId2Rule: "Please select Jumbo Joint.",
                jumboJointId3Rule: "Please select Jumbo Joint.",
                jointDuplicationRule1: "This Joint is already selected.",
                jointDuplicationRule2: "This Joint is already selected.",
                jointDuplicationRule3: "This Joint is already selected."
            }
        }).data("kendoValidator");
    }

    $("#save").click(function () {
        validator.validate();
    });

    $("#savecontinue").click(function () {
        validator.validate();
    });

    function filterJumboProduct(e) {

        var dataitem = $('#JumboId').data("kendoComboBox").dataItem($('#JumboId').data("kendoComboBox").select());
        setKendComboboxValue('ProductId', dataitem.ProductId);
        //$("#ProductId").val(dataitem.ProductId);
        setkendoNumericTextBoxValue('Thickness', dataitem.Thickness);
        return {
            productId: dataitem.ProductId
        }
    }

    function filterSlittingProduct(e) {
        var dataitem = $('#PrimarySlittingId').data("kendoComboBox").dataItem($('#PrimarySlittingId').data("kendoComboBox").select());
        setKendComboboxValue('ProductId', dataitem.ProductId);
        //$("#ProductId").val(dataitem.ProductId);
        setkendoNumericTextBoxValue('Thickness', dataitem.Thickness);
        return {
            productId: dataitem.ProductId
        }

    }

    function OnchangeJumbo(e) {
        if (this.value && this.selectedIndex === -1) {
            this.value("");
            return;
        }
        $('#JumboJointId1').data('kendoComboBox').dataSource.read();
        $('#JumboJointId2').data('kendoComboBox').dataSource.read();
        $('#JumboJointId3').data('kendoComboBox').dataSource.read();
    }

    function getjointProductId() {
        return {
            productId: $("#ProductId").val(),
            jumboId: getKendComboboxValue('JumboId')
        }
    }

    function getslittingjointProductId() {
        return {
            productId: $("#ProductId").val(),
            slittingId: getKendComboboxValue('PrimarySlittingId')
        }
    }

    function onChnageWidth(e) {
        var dataitem = $('#CoreId').data("kendoComboBox").dataItem($('#CoreId').data("kendoComboBox").select());
        if (dataitem != null) {
            setkendoNumericTextBoxValue('CoreWeight', dataitem.Weight * ($("#Width").data("kendoNumericTextBox").value() + 10));
        } else {
            setkendoNumericTextBoxValue('CoreWeight', '');
        }
    }

    function onChangeCore(e) {

        if (this.value && this.selectedIndex === -1) {
            this.value("");
            return;
        }

        var dataItem = e.sender.dataItem();
        if (dataItem != null) {
            setkendoNumericTextBoxValue('CoreWeight', dataItem.Weight * ($("#Width").data("kendoNumericTextBox").value() + 10));
        }
        else {
            setkendoNumericTextBoxValue('CoreWeight', '');
        }
        netWeigthCalculate();

    }

    function netWeigthCalculate() {
        var grossWeight = $("#Grossweight").val();
        var coreWeight = $("#CoreWeight").val();
        var netWeigth = grossWeight - coreWeight;
        setkendoNumericTextBoxValue('Netweight', netWeigth);

    }

    //function onMutiSelect() {
    //    var multiSelectItems = $('#JumboJointId').data('kendoMultiSelect');
    //    var count = multiSelectItems.value().length;
    //    var jointNo = $("#Joint").val();
    //    if (count > jointNo) {
    //        showMessageOnly('Please select only ' + jointNo + ' Joint as specified by you.', 'popup-error');
    //    }
    //}

    function viewOrderDetail() {
        var orderId = getKendComboboxValue('OrderId');
        var productId = $("#ProductId").val();

        if (orderId !== "" && orderId > 0 && productId !== "" && productId > 0) {
            var urllink = '@Url.Action("ViewOrderDetail", "Slitting")';
            var window = $("#wOrderDetail").data("kendoWindow");
            window.refresh({
                url: urllink
            });
            window.center();
            window.open();
        }
        else {
            showMessageOnly('Please select Order First', 'popup-error');
        }
    }

    function additionalViewInfo() {
        return {
            orderId: getKendComboboxValue('OrderId'),
            productId: getInputValueById('ProductId')
        };
    }

    function additionalJumboViewInfo() {
        return {
            jumboId: getKendComboboxValue('JumboId')
        }
    }
    function viewJumboDetail() {
        var jumboId = getKendComboboxValue('JumboId');

        if (jumboId !== "" && jumboId > 0) {
            var urllink = '@Url.Action("ViewJumboDetail", "Slitting")';
            var window = $("#wJumboDetail").data("kendoWindow");
            window.refresh({
                url: urllink
            });
            window.center();
            window.open();
        }
        else {
            showMessageOnly('Please select Jumbo First', 'popup-error');
        }
    }
</script>


