@using PolyFilms.Data.Models
@using PolyFilms.Common

@{
    ViewBag.Title = "Roles";
}

<div class="page-title">
    <div>
        <h1><i class="fa fa-cog"></i> Roles </h1>
    </div>
</div>


<div class="row">
    <div class="col-xs-12">
        <div class="panel">
            <div class="panel-body">
                @(Html.Kendo().Grid<RolesModel>()
                    .Name("grid")
              .Columns(columns =>
              {
                  if (AuthorizationHelper.CanEditDelete(ViewContext.RouteData.Values["Controller"].ToString()))
                  {
                      columns.Command(command =>
                      {
                          if (AuthorizationHelper.CanEdit(ViewContext.RouteData.Values["Controller"].ToString()))
                          {
                              command.Edit().Text(" ").HtmlAttributes(new { @title = "Edit" });
                          }
                          if (AuthorizationHelper.CanDelete(ViewContext.RouteData.Values["Controller"].ToString()))
                          {
                              command.Destroy().Text(" ").HtmlAttributes(new { @title = "Delete" });
                          }
                          if (AuthorizationHelper.CanEdit(ViewContext.RouteData.Values["Controller"].ToString()))
                          {
                              command.Custom("Assign Rights").Click("assignRights").HtmlAttributes(new { @title = "Assign Rights" });
                          }

                      }).Title("Action").HtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanEdit)
                         .HeaderHtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanEdit).Width(200);
                  }
                  columns.Bound(d => d.RoleId).Visible(false);
                  columns.Bound(d => d.RoleName);
                  if (AuthorizationHelper.CanChangeStatus(ViewContext.RouteData.Values["Controller"].ToString()))
                  {
                      columns.Bound(d => d.IsActive).Filterable(false)
                                     .ClientTemplate(Html.SetStatusClientTemplate("IsActive", "Roles", "ChangeStatus",
                                     "id=#= RoleId #", "#= RoleId #", "grid", resLabels.Role)).HtmlAttributes(WebHelper.StatusColumnStyle)
                                     .HeaderHtmlAttributes(WebHelper.StatusColumnStyle).Title("Change Status").Width(150);
                  }
              })
              .ToolBar(toolbar =>
              {
                  if (AuthorizationHelper.CanAdd(ViewContext.RouteData.Values["Controller"].ToString()))
                  {
                      toolbar.Create().Text("Add").HtmlAttributes(new { @title = "Add" });
                  }
              })
              .Editable(editable =>
              {
                  editable.Mode(GridEditMode.PopUp);
                  editable.DisplayDeleteConfirmation("Are you sure you want to delete this role?");
                  editable.Window(x => x.Title("Manage role"));
              })
              .Pageable(x =>
              {
                  x.Refresh(true);
                  x.PageSizes(WebHelper.PageSizes);
              })
              .Sortable(sortable => sortable.AllowUnsort(false))
              .Filterable(f=>f.Enabled(false))
              .NoRecords()
              .Events(grid => grid.Edit("edit"))
              .DataSource(dataSource => dataSource
                  .Ajax()
                  .ServerOperation(true)
                  .PageSize(WebHelper.PageSize)
                  .Model(model => model.Id(d => d.RoleId))
                  .Events(events => events.Error("onError(\"grid\")"))
                  .Create(update => update.Action("KendoSave", "Roles"))
                  .Read(read => read.Action("KendoRead", "Roles"))
                  .Update(update => update.Action("KendoSave", "Roles"))
                  .Destroy(update => update.Action("KendoDestroy", "Roles"))
              ))
            </div>
        </div>
    </div>
</div>

@(Html.Kendo().Window()
    .Name("myWindow")
    .Visible(false)
    .Draggable(true)
    .Modal(true)
    .Width(630)
    .Height(400)
    .Events(events => events.Activate("onActivate")))

<script type="text/javascript">
    function edit(e) {
        if (e.model.isNew()) {
            e.model.set("IsActive", true);
        }
        e.container.data('kendoWindow').bind('activate', function () {
            setFocusById('RoleName');
        });
    }


    function assignRights(e) {
        e.preventDefault();
        var tr = $(e.target).closest("tr");
        var data = this.dataItem(tr);
        var urllink = '@Url.Action("RoleMenusView", "Roles")';

        setLocalValue('RoleId', data.RoleId);

        var window = $("#myWindow").data("kendoWindow");
        window.content("");
        window.title("Assign Access Rights");
        window.refresh({
            url: urllink
           
        });

        window.center();
        window.open();

    }

    function additionalInfo() {
        return {
            roleId: getLocalValue('RoleId')
        };
    }

    function onActivate() {
        CheckAllView();
        CheckAllEdit();
        CheckAllAdd();
        CheckAllDelete();
        CheckAllStatusChange();
    }   
</script>