@using PolyFilms.Data.Models
@using System.Collections
@using PolyFilms.Common


@{
    ViewBag.Title = "Users";
}

<div class="page-title">
    <div>
        <h1><i class="fa fa-cog"></i> Users </h1>
    </div>
</div>


<div class="row">
    <div class="col-xs-12">
        <div class="panel">
            <div class="panel-body">
               @(Html.Kendo().Grid<UserModel>()
                    .Name("userGrid")
                    .Columns(columns =>
                    {

                        if (AuthorizationHelper.CanEditDelete(ViewContext.RouteData.Values["Controller"].ToString()))
                        {
                            columns.Command(command =>
                            {
                                if (AuthorizationHelper.CanEdit(ViewContext.RouteData.Values["Controller"].ToString()))
                                {
                                    command.Edit().Text(" ").HtmlAttributes(new { @title = "Edit" });
                                }
                                if (AuthorizationHelper.CanDelete(ViewContext.RouteData.Values["Controller"].ToString()))
                                {
                                    command.Destroy().Text(" ").HtmlAttributes(new { @title = "Delete" });
                                }
                            }).Title("Action").HtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanEdit)
                               .HeaderHtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanEdit);
                        }
                        columns.Bound(d => d.Name);
                        columns.Bound(d => d.Password);
                        columns.Bound(d => d.Username).Title(resLabels.Username);
                        columns.Bound(d => d.EmailAddress).Title(resLabels.Email);
                        columns.ForeignKey(p => p.RoleId, (IEnumerable)ViewBag.RoleList, "RoleId", "RoleName");
                        if (AuthorizationHelper.CanChangeStatus(ViewContext.RouteData.Values["Controller"].ToString()))
                        {
                            columns.Bound(d => d.IsActive).Filterable(false)
                                           .ClientTemplate(Html.SetStatusClientTemplate("IsActive", "User", "ChangeStatus",
                                           "id=#= UserId #", "#= UserId #", "userGrid", resLabels.User)).HtmlAttributes(WebHelper.StatusColumnStyle)
                                           .HeaderHtmlAttributes(WebHelper.StatusColumnStyle).HtmlAttributes(new { @title = "Change Status" }); ;
                        }
                    })
                    .ToolBar(toolbar =>
                    {
                        if (AuthorizationHelper.CanAdd(ViewContext.RouteData.Values["Controller"].ToString()))
                        {
                            toolbar.Create().Text("Add").HtmlAttributes(new { @title = "Add" });
                        }
                    })
                    .Editable(editable =>
                    {
                        editable.Mode(GridEditMode.PopUp);
                        editable.DisplayDeleteConfirmation("Are you sure you want to delete this user?");
                        editable.Window(x => x.Title("Manage User"));
                    })
                    .Pageable(x =>
                    {
                        x.Refresh(true);
                        x.PageSizes(WebHelper.PageSizes);
                    })
                                      .Sortable(sortable => sortable.AllowUnsort(false))
                                      .Filterable(filter=>filter.Enabled(false))
                                      .NoRecords()
                                      .Events(grid => grid.Edit("edit"))
                                      .DataSource(dataSource => dataSource
                                      .Ajax()
                                      .ServerOperation(true)
                                      .PageSize(WebHelper.PageSize)
                                      .Model(model => model.Id(d => d.UserId))
                                      .Events(events => events.Error("onError(\"userGrid\")"))
                                      .Create(update => update.Action("KendoSave", "User"))
                                      .Read(read => read.Action("KendoRead", "User"))
                                      .Update(update => update.Action("KendoSave", "User"))
                                      .Destroy(update => update.Action("KendoDestroy", "User"))
                ))
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    function edit(e) {
        if (e.model.isNew()) {
            e.model.set("IsActive", true);
            e.model.set("RoleId", "");
        }
        e.container.data('kendoWindow').bind('activate', function () {
            setFocusById('Name');
        });
    }
</script>